<Window x:Class="ViewLayer.ProductView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:validators="clr-namespace:LogicLayer.Validators;assembly=LogicLayer"
        xmlns:conv="clr-namespace:ViewLayer.Converters"
        mc:Ignorable="d"
        Title="ProductView" Width="500" ResizeMode="NoResize">
    <Window.Resources>
        <Style x:Key="DefaultTextBoxStyle" TargetType="TextBox">
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>
        <Style x:Key="DisplayErrorMessage" TargetType="TextBox" BasedOn="{StaticResource DefaultTextBoxStyle}">
            <Setter Property="Height" Value="20"/>
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <StackPanel>
                            <AdornedElementPlaceholder x:Name="placeholder" />
                            <TextBlock FontSize="11" FontStyle="Italic" Foreground="Red"
                                       Text="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}" />
                        </StackPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Margin" Value="0,0,0,14"/>
        </Style>
    </Window.Resources>

    <UniformGrid Rows="24" Columns="2" Margin="5">
        <UniformGrid.Resources>
            <Style TargetType="ComboBox">
                <Setter Property="Height" Value="25"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="VerticalAlignment" Value="Stretch"/>
            </Style>
            <Style TargetType="DatePicker">
                <Setter Property="Height" Value="25"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="VerticalAlignment" Value="Stretch"/>
            </Style>
            <Style TargetType="Label">
                <Setter Property="Height" Value="25"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="VerticalAlignment" Value="Stretch"/>
            </Style>
        </UniformGrid.Resources>

        <Label Content="Product name:" FontSize="10"/>
        <TextBox Name="ProductName" TextWrapping="Wrap" Style="{StaticResource DisplayErrorMessage}">
            <TextBox.Text>
                <Binding Path="ProductName" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <validators:ValidateProductName ValidationStep="RawProposedValue"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <Label Content="Make flag:" FontSize="10"/>
        <ComboBox ItemsSource="{Binding Flags}" SelectedItem="{Binding MakeFlag}" SelectedIndex="0"/>

        <Label Content="Finished Goods Flag:" FontSize="10"/>
        <ComboBox ItemsSource="{Binding Flags}" SelectedItem="{Binding FinishedGoodsFlag}" SelectedIndex="0"/>

        <Label Content="Product number:" FontSize="10"/>
        <TextBox Name="ProductNumber" TextWrapping="Wrap" Style="{StaticResource DisplayErrorMessage}" >
            <TextBox.Text>
                <Binding Path="ProductNumber" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <validators:ValidaterProductNumber ValidationStep="RawProposedValue"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <Label Content="Color:" FontSize="10"/>
        <ComboBox ItemsSource="{Binding Colors}" SelectedItem="{Binding Color}" SelectedIndex="0"/>

        <Label Content="Safety stock level:" FontSize="10"/>
        <TextBox Name="SafetyStockLevel" TextWrapping="Wrap" Style="{StaticResource DisplayErrorMessage}" >
            <TextBox.Text>
                <Binding Path="SafetyStockLevel" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <validators:ValidateIntegerHigher ValidationStep="RawProposedValue"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <Label Content="Standard cost:" FontSize="10"/>
        <TextBox Name="StandardCost" TextWrapping="Wrap" Style="{StaticResource DisplayErrorMessage}" >
            <TextBox.Text>
                <Binding Path="ReorderPoint" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <validators:ValidateRealNumberEqualHigher ValidationStep="RawProposedValue"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>
        
        
        <Label Content="Reorder point:" FontSize="10"/>
        <TextBox Name="ReorderPoint" TextWrapping="Wrap" Style="{StaticResource DisplayErrorMessage}" >
            <TextBox.Text>
                <Binding Path="StandardCost" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <validators:ValidateIntegerHigher ValidationStep="RawProposedValue"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <Label Content="List price:" FontSize="10"/>
        <TextBox Name="ListPrice" TextWrapping="Wrap" Style="{StaticResource DisplayErrorMessage}" >
            <TextBox.Text>
                <Binding Path="ListPrice" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <validators:ValidateRealNumberEqualHigher ValidationStep="RawProposedValue"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <Label Content="Size:" FontSize="10"/>
        <ComboBox ItemsSource="{Binding Sizes}"  SelectedItem="{Binding Size}" SelectedIndex="0"/>

        <Label Content="Size unit measure code:" FontSize="10"/>
        <ComboBox ItemsSource="{Binding SizesUnits}"  SelectedItem="{Binding SizeUnitMeasureCode}" SelectedIndex="0"/>

        <Label Content="Weight unit measure code:" FontSize="10"/>
        <ComboBox ItemsSource="{Binding WeightUnits}"  SelectedItem="{Binding WeightUnitMeasureCode}" SelectedIndex="0"/>

        <Label Content="Weight:" FontSize="10"/>
        <TextBox Name="Weight" TextWrapping="Wrap" Style="{StaticResource DisplayErrorMessage}" >
            <TextBox.Text>
                <Binding Path="Weight" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <validators:ValidateRealHigher ValidationStep="RawProposedValue"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text> 
        </TextBox>
        
        <Label Content="Days to manufacture:" FontSize="10"/>
        <TextBox Name="DaysToManufacture" TextWrapping="Wrap" Style="{StaticResource DisplayErrorMessage}" >
            <TextBox.Text>
                <Binding Path="DaysToManufacture" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <validators:ValidateDays ValidationStep="RawProposedValue"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <Label Content="Product line:" FontSize="10"/>
        <ComboBox ItemsSource="{Binding ProductLines}"  SelectedItem="{Binding ProductLine}" SelectedIndex="0"/>

        <Label Content="Class:" FontSize="10"/>
        <ComboBox ItemsSource="{Binding Classes}"  SelectedItem="{Binding Class}" SelectedIndex="0"/>

        <Label Content="Style:" FontSize="10"/>
        <ComboBox ItemsSource="{Binding Styles}"  SelectedItem="{Binding Style}" SelectedIndex="0"/>

        <Label Content="Product subcategory:" FontSize="10"/>
        <ComboBox ItemsSource="{Binding ProductSubCategories}"  SelectedItem="{Binding ProductSubcategoryID}" SelectedIndex="0"/>

        <Label Content="Product model:" FontSize="10"/>
        <ComboBox ItemsSource="{Binding ModelIds}"  SelectedItem="{Binding ModelId}" SelectedIndex="0"/>

        <Label Content="Sell start date:" FontSize="10"/>
        <DatePicker SelectedDate="{Binding SellStartDate}"/>

        <Label Content="Sell end date:" FontSize="10"/>
        <DatePicker SelectedDate="{Binding SellEndDate}"/>

        <StackPanel Orientation="Horizontal">
            <Button Content="Confirm" Command="{Binding AddItemToDataBase}" Height="23" Width="73">
                <Button.Resources>
                    <conv:IsEmptyConverter x:Key="isEmptyConverter"/>
                </Button.Resources>
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="IsEnabled" Value="False"/>
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding ElementName=ProductName, Path=Text, Converter={StaticResource isEmptyConverter}}" Value="True"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=ProductName}" Value="False"/>

                                    <Condition Binding="{Binding ElementName=ProductNumber, Path=Text, Converter={StaticResource isEmptyConverter}}" Value="True"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=ProductNumber}" Value="False"/>

                                    <Condition Binding="{Binding ElementName=SafetyStockLevel, Path=Text, Converter={StaticResource isEmptyConverter}}" Value="True"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=SafetyStockLevel}" Value="False"/>

                                    <Condition Binding="{Binding ElementName=StandardCost, Path=Text, Converter={StaticResource isEmptyConverter}}" Value="True"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=StandardCost}" Value="False"/>

                                    <Condition Binding="{Binding ElementName=ReorderPoint, Path=Text, Converter={StaticResource isEmptyConverter}}" Value="True"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=ReorderPoint}" Value="False"/>

                                    <Condition Binding="{Binding ElementName=ListPrice, Path=Text, Converter={StaticResource isEmptyConverter}}" Value="True"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=ListPrice}" Value="False"/>

                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=Weight}" Value="False"/>

                                    <Condition Binding="{Binding ElementName=DaysToManufacture, Path=Text, Converter={StaticResource isEmptyConverter}}" Value="True"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=DaysToManufacture}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="True"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </StackPanel>
    </UniformGrid>
</Window>
